BEGIN ISOLATION LEVEL READ COMMITTED;


DROP TABLE IF EXISTS Branches CASCADE;
CREATE TABLE Branches (
                          id serial primary key,
                          "name" varchar
);

DROP TABLE IF EXISTS Divisions CASCADE;
CREATE TABLE Divisions (
                           id serial primary key,
                           "name" varchar
);

DROP TABLE IF EXISTS Cities CASCADE;
CREATE TABLE Cities (
                        id serial primary key,
                        "name" varchar
);

DROP TABLE IF EXISTS Departments CASCADE;
CREATE TABLE Departments (
                             id serial primary key,
                             "name" varchar
);

DROP TABLE IF EXISTS Branches CASCADE;
CREATE TABLE Branches (
                          id serial primary key,
                          "name" varchar
);

DROP TABLE IF EXISTS Imports CASCADE;
CREATE TABLE Imports (
                         id serial primary key,
                         "name" varchar
);

DROP TABLE IF EXISTS Backlog CASCADE;
CREATE TABLE Backlog (
                         id serial primary key,
                         employee_id integer, -- REFERENCES employees,
                         ip varchar,
                         "date" Date,
                         activity varchar
);


DROP TABLE IF EXISTS Online_trainings CASCADE;
CREATE TABLE Online_trainings (
                                  id serial primary key,
                                  "name" varchar,
                                  lector varchar,
                                  agency varchar,
                                  place varchar,
                                  "date" Date,
                                  duration integer,
                                  agenda varchar,
                                  deadline Date
);

DROP TABLE IF EXISTS Online_training_signatures CASCADE;
CREATE TABLE Online_training_signatures (
                                            id serial primary key,
                                            training_id integer, -- REFERENCES online_trainings,
                                            employee_id integer, -- REFERENCES employees,
                                            "date" Date
);

DROP TABLE IF EXISTS Documents CASCADE;
CREATE TABLE Documents (
                           id serial primary key,
                           "name" varchar,
                           link varchar,
                           "type" varchar,
                           note varchar,
                           release_date Date,
                           deadline Date,
                           order_number integer,
                           version varchar,
                           prev_version_id integer, -- REFERENCES documents,
                           assigned_to varchar,
                           require_superior boolean,
                           edited boolean default true
);

DROP TABLE IF EXISTS Document_signatures CASCADE;
CREATE TABLE Document_signatures (
                                     id serial primary key,
                                     employee_id integer, -- REFERENCES employees,
                                     e_date Date,
                                     superior_id integer, -- REFERENCES employees,
                                     s_date Date,
                                     document_id integer-- REFERENCES documents
);

DROP TABLE IF EXISTS Cancel_signs CASCADE;
CREATE TABLE Cancel_signs (
                              document_signature_id integer unique REFERENCES document_signatures,
                              "date" date
);

DROP TABLE IF EXISTS Employees CASCADE;
CREATE TABLE Employees (
                           id serial primary key,
                           first_name varchar,
                           last_name varchar,
                           login varchar,
                           password varchar,
                           role varchar,
                           email varchar,
                           job_title varchar,
                           manager_id integer,
                           branch_id  integer,
                           division_id integer,
                           department_id integer,
                           city_id integer,
                           deleted boolean,
                           import_id integer
);

create index document_signature_idx
    on cancel_signs(document_signature_id);

create or replace function Is_suitable(id1 integer, id2 integer)
    returns bool
    language plpgsql as
$$
begin
    return (id1 = id2 or id1 isnull or id2 isnull or id2 = 0);
end;
$$;

CREATE OR REPLACE FUNCTION insert_delete_cancel_signs( in_array integer[] )
    RETURNS void AS $$
DECLARE
    i integer;
    row_exists NUMERIC;
BEGIN
    FOR i IN 1 .. array_upper(in_array, 1)
        LOOP

            SELECT count(*)
            INTO row_exists
            FROM cancel_signs
            WHERE document_signature_id = in_array[ i ];

            IF (row_exists > 0) THEN
                delete FROM cancel_signs
                WHERE document_signature_id = in_array[ i ];
            ELSE
                INSERT INTO cancel_signs(document_signature_id, date)
                VALUES(in_array[i], now());
            END IF;

        END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION resign( in_array integer[] )
    RETURNS void AS $$
DECLARE
    i integer;
BEGIN
    FOR i IN 1 .. array_upper(in_array, 1)
        LOOP

            insert into document_signatures(employee_id, e_date,
                                            superior_id, s_date, document_id)
            SELECT employee_id, null, superior_id, null, document_id
            from document_signatures
            where document_signatures.id = in_array[ i ];

        END LOOP;
END;
$$ LANGUAGE plpgsql;

COMMIT;
-- rollback